const fs = require('fs');
const path = require('path');
const marked = require('marked');
const os = require('os');
const config = require('./config');

// Regex para identificar a seção de metadados
const METADATA_REGEX = /^---\n([\s\S]*?)\n---\n/;

function parseMetadata(content) {
    const match = content.match(METADATA_REGEX);
    if (match) {
        try {
            const metadataStr = match[1];
            const metadata = {};
            
            metadataStr.split('\n').forEach(line => {
                const [key, value] = line.split(': ');
                if (key === 'tags') {
                    metadata.tags = JSON.parse(value);
                }
            });
            
            return {
                metadata,
                content: content.replace(METADATA_REGEX, '')
            };
        } catch (error) {
            console.error('Erro ao parsear metadados:', error);
        }
    }
    
    return {
        metadata: { tags: [] },
        content
    };
}

function generateMetadata(metadata) {
    let content = '---\n';
    if (metadata.tags && metadata.tags.length > 0) {
        content += `tags: ${JSON.stringify(metadata.tags)}\n`;
    }
    content += '---\n\n';
    return content;
}

function updateMarkdownMetadata(filePath, newTags) {
    try {
        const content = fs.readFileSync(filePath, 'utf-8');
        const { metadata, content: markdownContent } = parseMetadata(content);
        
        // Atualiza a lista de tags (remove duplicatas)
        metadata.tags = Array.from(new Set([...(metadata.tags || []), ...newTags]));
        
        // Gera o novo conteúdo com metadados atualizados
        const newContent = generateMetadata(metadata) + markdownContent;
        
        fs.writeFileSync(filePath, newContent, 'utf-8');
        return metadata.tags;
    } catch (error) {
        console.error('Erro ao atualizar metadados:', error);
        return [];
    }
}

function parseMarkdownToMindmap(markdown) {
    const { metadata, content } = parseMetadata(markdown);
    const tokens = marked.lexer(content);
    const mindmapData = convertTokensToMindmap(tokens);
    
    // Se não houver dados, retorna um nó root vazio
    if (!mindmapData || mindmapData.length === 0) {
        return [{
            text: 'Root',
            children: []
        }];
    }
    
    return mindmapData;
}

function findParentNode(nodes, level) {
    for (let i = nodes.length - 1; i >= 0; i--) {
        if (nodes[i].level < level) {
            return nodes[i];
        }
    }
    return null;
}

function extractLinkFromText(text) {
    const linkRegex = /\[([^\]]+)\]\(([^)]+)\)/;
    const match = text.match(linkRegex);
    if (match) {
        return {
            text: match[1],
            link: match[2]
        };
    }
    return { text };
}

/**
 * Extrai tags de um texto e retorna o texto limpo e as tags extraídas
 * @param {string} text - O texto original que pode conter tags
 * @returns {Object} Um objeto com o texto limpo e as tags extraídas
 */
function extractTagsFromText(text) {
    if (!text) return { cleanText: '', tags: [] };
    
    // Detecta e extrai tags em vários formatos

    // Caso 1: Linha exclusiva de tags (ex: "tags: tag1, tag2")
    if (/^\s*tags:/.test(text)) {
        const tagsText = text.trim().replace(/^\s*tags:/, '').trim();
        const tags = tagsText.split(',').map(tag => tag.trim()).filter(Boolean);
        return { cleanText: '', tags };
    }
    
    // Caso 2: Texto multilinhas com uma ou mais linhas de tags
    const lines = text.split('\n');
    const nonTagLines = [];
    const tagLines = [];
    
    lines.forEach(line => {
        if (/^\s*tags:/.test(line)) {
            tagLines.push(line.trim());
        } else {
            nonTagLines.push(line);
        }
    });
    
    if (tagLines.length > 0) {
        const cleanText = nonTagLines.join('\n').trim();
        const tags = [];
        
        tagLines.forEach(tagLine => {
            const tagsText = tagLine.replace(/^\s*tags:/, '').trim();
            const lineTags = tagsText.split(',').map(tag => tag.trim()).filter(Boolean);
            tags.push(...lineTags);
        });
        
        return { cleanText, tags };
    }
    
    // Caso 3: Texto com tags no final (ex: "texto texto tags: tag1, tag2")
    const inlineMatch = text.match(/(.*)\s+tags:\s*(.+?)$/s);
    if (inlineMatch) {
        const cleanText = inlineMatch[1].trim();
        const tagsText = inlineMatch[2].trim();
        const tags = tagsText.split(',').map(tag => tag.trim()).filter(Boolean);
        return { cleanText, tags };
    }
    
    // Caso 4: Sem tags
    return { cleanText: text, tags: [] };
}

function convertTokensToMindmap(tokens) {
    const root = { text: '', children: [] };
    const stack = [{ node: root, level: 0 }];
    let currentList = null;
    let lastNode = null;
    
    tokens.forEach(token => {
        if (token.type === 'heading') {
            const level = token.depth;
            const text = token.text;
            
            // Extrai apenas o link do texto, já que as tags agora estão em uma linha separada
            const { text: cleanText, link } = extractLinkFromText(text);
            
            const newNode = { 
                text: cleanText, 
                children: [],
                link,
                tags: []
            };
            
            // Remove nós do stack que têm nível maior ou igual
            while (stack.length > 1 && stack[stack.length - 1].level >= level) {
                stack.pop();
            }
            
            const parent = stack[stack.length - 1].node;
            parent.children.push(newNode);
            stack.push({ node: newNode, level });
            currentList = null;
            lastNode = newNode;
            
        } else if (token.type === 'paragraph' && token.text.startsWith('tags:') && lastNode) {
            // Processa linha de tags
            const tagsText = token.text.replace('tags:', '').trim();
            lastNode.tags = tagsText.split(',').map(tag => tag.trim());
            
        } else if (token.type === 'list') {
            currentList = token;
            const level = (stack[stack.length - 1].level || 0) + 1;
            
            token.items.forEach(item => {
                // Extrai tags e limpa o texto do item
                const { cleanText: itemText, tags } = extractTagsFromText(item.text);
                
                // Extrai links do texto limpo
                const { text: finalText, link } = extractLinkFromText(itemText);
                
                const newNode = {
                    text: finalText,
                    children: [],
                    link,
                    tags: tags
                };
                
                const parent = stack[stack.length - 1].node;
                parent.children.push(newNode);
                lastNode = newNode;
                
                // Processa os tokens do item para encontrar tags adicionais
                if (item.tokens) {
                    item.tokens.forEach(subToken => {
                        if (subToken.type === 'text') {
                            const { tags: extractedTags } = extractTagsFromText(subToken.text);
                            if (extractedTags.length > 0) {
                                // Adiciona as tags extraídas às tags existentes (se houver)
                                newNode.tags = [...newNode.tags, ...extractedTags];
                            }
                        }
                    });
                    
                    // Garante que as tags são únicas
                    newNode.tags = Array.from(new Set(newNode.tags));
                }
                
                // Se o item tem subitens, processa recursivamente
                if (item.tokens && item.tokens.length > 0) {
                    const subTokens = item.tokens.filter(t => t.type === 'list');
                    if (subTokens.length > 0) {
                        stack.push({ node: newNode, level: level + 1 });
                        subTokens.forEach(subList => {
                            const subItems = convertTokensToMindmap([subList]);
                            if (subItems && subItems.length > 0) {
                                newNode.children.push(...subItems[0].children);
                            }
                        });
                        stack.pop();
                    }
                }
            });
        }
    });
    
    return root.children;
}

function generateHTML(nodes) {
    if (!Array.isArray(nodes)) {
        nodes = [nodes];
    }
    
    let html = '<ul>';
    nodes.forEach(node => {
        html += '<li>';
        const spanAttrs = [];
        const spanClasses = [];
        
        if (node.link) {
            spanAttrs.push(`